{"ast":null,"code":"var _jsxFileName = \"/Users/tommytomaye/Desktop/todo-app/src/todo-list.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ToDoItem from './todo-item.js';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport DatePicker from 'react-datepicker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ToDoList() {\n  _s();\n\n  const [itemDescription, setItemDescription] = useState('');\n  const [dueDate, setDueDate] = useState(new Date());\n  const [filterValue, setFilterValue] = useState('');\n  const [toDoItems, setToDoItems] = useState([]);\n  useEffect(() => {\n    // At this point we will assume that this array is a part of an API response \n    // Let's imagine that we are making a GET call here. \n    const items = [{\n      id: 0,\n      description: 'Wash the car',\n      dueDate: new Date()\n    }, {\n      id: 1,\n      description: 'Clean the house',\n      dueDate: new Date()\n    }, {\n      id: 2,\n      description: 'Cook some foods',\n      dueDate: new Date()\n    }];\n    setToDoItems(items);\n  }, []);\n\n  function AddNewItem() {\n    const newToDOItem = {\n      id: this.state.toDoItems.length,\n      description: this.state.itemDescription,\n      dueDate: this.state.dueDate\n    };\n    toDoItems.push(toDoItems);\n    setToDoItems(toDoItems);\n  }\n\n  const handleDelete = id => {\n    let todoItems = toDoItems.filter(item => item.id !== id);\n    setToDoItems(todoItems);\n  };\n\n  const handleChange = item => {// todoItems[item.index].description = item.description || ''; \n    // if (item.dueDate) {\n    //     todoItems[item.index].dueDate = item.dueDate;\n    // } \n    // setToDoItems(todoItems);\n  };\n\n  const submitNotes = () => {\n    // Since we don't have a real API to make a POST call here we will store the data in local storage. \n    localStorage.setItem('toDoList', JSON.stringify(toDoItems));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container p-4 d-flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: event => setItemDescription(event.target.value),\n        value: itemDescription,\n        className: \"form-control\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n        selected: dueDate,\n        onChange: date => setDueDate(date),\n        minDate: new Date(),\n        name: \"dueDate\",\n        dateFormat: \"MM/dd/yyyy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.AddNewItem,\n        className: \"btn btn-primary add-btn\",\n        children: \"ADD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container d-flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-4\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Filter items by description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-8\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: event => setFilterValue(event.target.value),\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"m-t-3\",\n        children: toDoItems.filter(item => item.description.toLowerCase().includes(filterValue.toLowerCase())).map((item, index) => {\n          return /*#__PURE__*/_jsxDEV(ToDoItem, {\n            item: item,\n            onChange: () => this.handleChange,\n            onClick: () => this.handleDelete\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 28\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.submitNotes,\n        className: \"btn btn-primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n} // import React, { Component } from 'react';\n// import ToDoItem from './todo-item.js';\n// import 'react-datepicker/dist/react-datepicker.css';\n// import DatePicker from 'react-datepicker';\n// class ToDoList extends Component {\n//     constructor() {\n//         super()\n//         this.state = {\n//             itemDescription: '',\n//             dueDate: new Date(),\n//             filterValue: '',\n//             toDoItems: []\n//         };\n//         this.submitNotes = this.submitNotes.bind(this);\n//         this.handleChange = this.handleChange.bind(this);\n//         this.handleDelete = this.handleDelete.bind(this);\n//         this.AddNewItem = this.AddNewItem.bind(this);\n//     }\n//     componentDidMount() {\n//         // At this point we will assume that this array is a part of an API response \n//         // Let's imagine that we are making a GET call here. \n// const items = [\n//     { id: 0, description: 'Wash the car', dueDate: new Date() },\n//     { id: 1, description: 'Clean the house', dueDate: new Date() },\n//     { id: 2, description: 'Cook some foods', dueDate: new Date() }]\n//         this.setState({\n//             toDoItems: items\n//         });\n//     }\n//     AddNewItem() {\n// const newToDOItem = {\n//     id: this.state.toDoItems.length,\n//     description: this.state.itemDescription,\n//     dueDate: this.state.dueDate,\n// };\n//         const toDoItems = this.state.toDoItems;\n//         toDoItems.push(newToDOItem);\n//         this.setState({\n//             toDoItems: toDoItems\n//         })\n//         this.setState({\n//             itemDescription: ''\n//         })\n//     }\n// handleDelete(id) {\n// let todoItems = this.state.toDoItems.filter((item) => item.id !== id);\n// this.setState({ toDoItems: todoItems });\n// }\n// handleChange(item) {\n//     let todoItems = this.state.toDoItems;\n//     todoItems[item.index].description = item.description || ''; \n// if (item.dueDate) {\n//     todoItems[item.index].dueDate = item.dueDate;\n// } \n//     this.setState({\n//         toDoItems: todoItems\n//     })\n// }\n//     submitNotes() {\n// // Since we don't have a real API to make a POST call here we will store the data in local storage. \n// localStorage.setItem('toDoList', JSON.stringify(this.state.toDoItems));\n//     }\n//     render() {\n//         const toDoItems = this.state.toDoItems;\n//         return (\n// <>\n//     <div className=\"container p-4 d-flex\">\n//         <input type=\"text\"\n//             onChange={(event) => this.setState({itemDescription: event.target.value})}\n//             value={this.state.itemDescription}\n//             className=\"form-control\" />\n//         <DatePicker\n//             selected={this.state.dueDate}\n//             onChange={(date) => this.setState({dueDate: date})}\n//             minDate={new Date()}\n//             name=\"dueDate\"\n//             dateFormat=\"MM/dd/yyyy\"\n//         />\n//         <button onClick={this.AddNewItem} className=\"btn btn-primary add-btn\">ADD</button>\n//     </div>\n//     <div className=\"container d-flex\">\n//         <div className='col-4'>\n//             <span>Filter items by description</span>\n//         </div>\n//         <div className='col-8'>\n//             <input type=\"text\"\n//                 onChange={(event) => this.setState({filterValue: event.target.value})}\n//                 className=\"form-control\" />\n//         </div>\n//     </div>\n//     <div className='container'>\n//         <div className='m-t-3'>\n//             {toDoItems.filter(item => item.description.toLowerCase().includes(this.state.filterValue.toLowerCase())).map((item, index) => {\n//                 return <ToDoItem key={index} item={item}\n//                     onChange={this.handleChange}\n//                     onClick={this.handleDelete} />\n//             })}\n//         </div>\n//     </div>\n//     <div className='container'>\n//         <button onClick={this.submitNotes} className=\"btn btn-primary\">Submit</button>\n//     </div>\n// </>\n//         )\n//     }\n// }\n\n\n_s(ToDoList, \"DHG6qCEci3Tt3VZ8e/mpPAAtFi8=\");\n\n_c = ToDoList;\nexport default ToDoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"sources":["/Users/tommytomaye/Desktop/todo-app/src/todo-list.js"],"names":["React","useState","useEffect","ToDoItem","DatePicker","ToDoList","itemDescription","setItemDescription","dueDate","setDueDate","Date","filterValue","setFilterValue","toDoItems","setToDoItems","items","id","description","AddNewItem","newToDOItem","state","length","push","handleDelete","todoItems","filter","item","handleChange","submitNotes","localStorage","setItem","JSON","stringify","event","target","value","date","toLowerCase","includes","map","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ToDoItem from './todo-item.js';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport DatePicker from 'react-datepicker';\nfunction ToDoList() {\n    const [itemDescription, setItemDescription] = useState('');\n    const [dueDate, setDueDate] = useState(new Date());\n    const [filterValue, setFilterValue] = useState('');\n    const [toDoItems, setToDoItems] = useState([]);\n\n    useEffect(() => {\n        // At this point we will assume that this array is a part of an API response \n        // Let's imagine that we are making a GET call here. \n        const items = [\n            { id: 0, description: 'Wash the car', dueDate: new Date() },\n            { id: 1, description: 'Clean the house', dueDate: new Date() },\n            { id: 2, description: 'Cook some foods', dueDate: new Date() }];\n        setToDoItems(items);\n    }, []);\n\n    function AddNewItem() {\n        const newToDOItem = {\n            id: this.state.toDoItems.length,\n            description: this.state.itemDescription,\n            dueDate: this.state.dueDate,\n        };\n        toDoItems.push(toDoItems);\n        setToDoItems(toDoItems);\n    }\n\n    const handleDelete = (id) => {\n        let todoItems = toDoItems.filter((item) => item.id !== id);\n        setToDoItems(todoItems);\n    }\n\n    const handleChange = (item) => {\n        // todoItems[item.index].description = item.description || ''; \n        // if (item.dueDate) {\n        //     todoItems[item.index].dueDate = item.dueDate;\n        // } \n        // setToDoItems(todoItems);\n    }\n\n    const submitNotes = () => {\n        // Since we don't have a real API to make a POST call here we will store the data in local storage. \n        localStorage.setItem('toDoList', JSON.stringify(toDoItems));\n    }\n\n    return <>\n        <div className=\"container p-4 d-flex\">\n            <input type=\"text\"\n                onChange={(event) => setItemDescription(event.target.value)}\n                value={itemDescription}\n                className=\"form-control\" />\n            <DatePicker\n                selected={dueDate}\n                onChange={(date) => setDueDate(date)}\n                minDate={new Date()}\n                name=\"dueDate\"\n                dateFormat=\"MM/dd/yyyy\"\n            />\n            <button onClick={this.AddNewItem} className=\"btn btn-primary add-btn\">ADD</button>\n        </div>\n        <div className=\"container d-flex\">\n            <div className='col-4'>\n                <span>Filter items by description</span>\n            </div>\n            <div className='col-8'>\n                <input type=\"text\"\n                    onChange={(event) => setFilterValue(event.target.value)}\n                    className=\"form-control\" />\n            </div>\n        </div>\n        <div className='container'>\n            <div className='m-t-3'>\n                {toDoItems.filter(item => item.description.toLowerCase().includes(filterValue.toLowerCase())).map((item, index) => {\n                    return <ToDoItem key={index} item={item}\n                        onChange={() => this.handleChange}\n                        onClick={() => this.handleDelete} />\n                })}\n            </div>\n        </div>\n        <div className='container'>\n            <button onClick={() => this.submitNotes} className=\"btn btn-primary\">Submit</button>\n        </div>\n    </>\n}\n// import React, { Component } from 'react';\n// import ToDoItem from './todo-item.js';\n// import 'react-datepicker/dist/react-datepicker.css';\n// import DatePicker from 'react-datepicker';\n// class ToDoList extends Component {\n//     constructor() {\n//         super()\n//         this.state = {\n//             itemDescription: '',\n//             dueDate: new Date(),\n//             filterValue: '',\n//             toDoItems: []\n//         };\n//         this.submitNotes = this.submitNotes.bind(this);\n//         this.handleChange = this.handleChange.bind(this);\n//         this.handleDelete = this.handleDelete.bind(this);\n//         this.AddNewItem = this.AddNewItem.bind(this);\n//     }\n\n//     componentDidMount() {\n//         // At this point we will assume that this array is a part of an API response \n//         // Let's imagine that we are making a GET call here. \n// const items = [\n//     { id: 0, description: 'Wash the car', dueDate: new Date() },\n//     { id: 1, description: 'Clean the house', dueDate: new Date() },\n//     { id: 2, description: 'Cook some foods', dueDate: new Date() }]\n//         this.setState({\n//             toDoItems: items\n//         });\n//     }\n\n//     AddNewItem() {\n// const newToDOItem = {\n//     id: this.state.toDoItems.length,\n//     description: this.state.itemDescription,\n//     dueDate: this.state.dueDate,\n// };\n//         const toDoItems = this.state.toDoItems;\n//         toDoItems.push(newToDOItem);\n//         this.setState({\n//             toDoItems: toDoItems\n//         })\n//         this.setState({\n//             itemDescription: ''\n//         })\n//     }\n\n// handleDelete(id) {\n// let todoItems = this.state.toDoItems.filter((item) => item.id !== id);\n// this.setState({ toDoItems: todoItems });\n// }\n\n// handleChange(item) {\n//     let todoItems = this.state.toDoItems;\n//     todoItems[item.index].description = item.description || ''; \n// if (item.dueDate) {\n//     todoItems[item.index].dueDate = item.dueDate;\n// } \n//     this.setState({\n//         toDoItems: todoItems\n//     })\n// }\n\n//     submitNotes() {\n// // Since we don't have a real API to make a POST call here we will store the data in local storage. \n// localStorage.setItem('toDoList', JSON.stringify(this.state.toDoItems));\n//     }\n\n//     render() {\n//         const toDoItems = this.state.toDoItems;\n//         return (\n// <>\n//     <div className=\"container p-4 d-flex\">\n//         <input type=\"text\"\n//             onChange={(event) => this.setState({itemDescription: event.target.value})}\n//             value={this.state.itemDescription}\n//             className=\"form-control\" />\n//         <DatePicker\n//             selected={this.state.dueDate}\n//             onChange={(date) => this.setState({dueDate: date})}\n//             minDate={new Date()}\n//             name=\"dueDate\"\n//             dateFormat=\"MM/dd/yyyy\"\n//         />\n//         <button onClick={this.AddNewItem} className=\"btn btn-primary add-btn\">ADD</button>\n//     </div>\n//     <div className=\"container d-flex\">\n//         <div className='col-4'>\n//             <span>Filter items by description</span>\n//         </div>\n//         <div className='col-8'>\n//             <input type=\"text\"\n//                 onChange={(event) => this.setState({filterValue: event.target.value})}\n//                 className=\"form-control\" />\n//         </div>\n//     </div>\n//     <div className='container'>\n//         <div className='m-t-3'>\n//             {toDoItems.filter(item => item.description.toLowerCase().includes(this.state.filterValue.toLowerCase())).map((item, index) => {\n//                 return <ToDoItem key={index} item={item}\n//                     onChange={this.handleChange}\n//                     onClick={this.handleDelete} />\n//             })}\n//         </div>\n//     </div>\n//     <div className='container'>\n//         <button onClick={this.submitNotes} className=\"btn btn-primary\">Submit</button>\n//     </div>\n// </>\n//         )\n//     }\n// }\n\nexport default ToDoList;"]},"metadata":{},"sourceType":"module"}